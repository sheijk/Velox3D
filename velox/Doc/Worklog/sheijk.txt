Worklog von sheijk
-------------------------------------------------------------------------------
----- messages to sheijk:

TODO: Einige typedefs sollte einfacher zugaenglcher sein z.b. Vertex
TODO: Die ObjectRegistry schmiert ab, wenn 2 services gleichen types versucht werden
zu laden. Nett wäre es wenn die O.R. das abfangen kann, wenn in den xml files
die gleichen services stehen -[ins]

<ins>: vfs bug:wenn ich eine date mit VReadAccess oeffnen will bekomme ich eine
exception: vfs does not allow writeacess! <- stimmt gar nicht! ;) -- sheijk

-------------------------------------------------------------------------------
----- current assigned tasks:

- velox design
- entity system / world planen
- netzwerk + scripting planen

-------------------------------------------------------------------------------
----- random thoughts:
eine map fuer xml files? (config.services.vfs.filename = "vfs.dll" etc.),
dafuer ein any objekt, was strings speichert und in bel. datentypen mittels
template member konvertiert?

-------------------------------------------------------------------------------
----- team todo:


-------------------------------------------------------------------------------
----- personal todo:

	geometry generation:
	concept GeometryProvider
		void GenerateCoordinates()
		void GenerateTexCoords()
		MD.GeometryType GetGeometryType()
		VertexBuffer GetVertexBuffer()
		IndexBuffer GetIndexBuffer()
		VBuffer<VertexStructure> VertexBuffer
		VBuffer<vuint> IndexBuffer




	roadmap:
	drawlist state sortierung
	design der engine: entity system + zusammenarbeit der einzelnen engine teile

	.refactorings
	./velox services zu einem projekt zusammen fassen
	./services auf VModuleBase umstellen
	wxWidgets abhaengige services in eine dll
	IVDeviceProvider.h finden und aus dem CVS schmeissen
	./example app aufraeumen

	.mem manager
	./mem manager schreiben
	./in kernel + corelib integrieren
	./in xml service integrieren
	simpel malloc/dealloc version bauen
	leak finder bauen, evtl flipcode leak finder einbaun?
	in vfs integrieren
	in restliche services integrieren
	managed objects schreiben

	.geometry
	./design fuer im speicher gehaltene geometry (ausserhalb des devices)
	alle geometrie generatoren vereinheitlichen
	interface
	einfache geometry klasse fuer dynamische geometrie

	.drawlist:
	./interfaces
	./objekte hinzufuegen
	./objekte rendern
	nach states sortieren

	.gfx device:
	./texturen: nur eine textur pro buffer anlegen..
	mesh erzeugung: evtl aendern, und MaterialHandle statt MatDescr als param
	mat descr. durch alternativ system ersetzen? (default mat zurueckgeben,
	und dass dann mit effekten veraendern?)
	./buffer aendern
	./indexed/non indexed geometry auto auswahl
	./render states anwenden
	./render states aus vmaterial descr erzeugen
	./textur buffer erzeugen
	./unterstuetzung fuer tex coords in mesh und mesh descr
	./mesh vor abstuerzen durch fehlende felder sichern
	./textur in mat desc + tex state
	./render state categories
	./category list
	./device states anwenden lassen
	./states usw. ins device bewegen
	./render state categories ins device
	./materials erzeugen
	./mesh: render state list liefern
	./default color in die mat descr aufnehmen

	.scene graph
	./interfaces schreiben (basierend auf ins code)
	./simple implementation
	./in example app einbaun
	animationen erlauben
	nodes sollten irgendwann auch geloescht werden (shared ptr?)
	zusammenarbeit mit physik, etc (-> entity system)

	SmartPointer Klasse fuer ObjectRegistry (wird beim Loeschen eines
	Objekts auf 0 gesetzt)
	alternativ: "reset" funktion fuer Shared Pointer
	Service Abhaengigkeiten Dokumentieren
	Klasse zum Laden einer DLL (fuer Kernel, und sonstiges)

	Dokumentation
	Coding Guidelines uebersichtlicher machen

	Netzwerk, Scripting planen
	./Graphics Device: Design
	SceneGraph / Engine Architektur
	Editor Plugin System Design
	Auf die Langnese Insel ziehen

Doku:
	Doku System
	./VFS Doku
	Tutorials fuer
	  Exceptions
	  Iteratoren verbessern
	  SmartPointer erweitern (erzeugen eigener Policies)
	  Virtual File System
	    benutzen (laden/schreiben von Daten)
	    erweitern (DataProvider)
		Schreiben von Services
	Infos ueber
	  Velox Architektur
	  Services


--------------------------------------------------------------------------------
----- last things sheijk finished:

log:

10.04.2004
V3dLib/Graphics/Misc/VKeyboardCamera
V3dlib/graphics/geometry/vresizablegeometry + vdynamicgeometry
z-buffer settings in mat. descr.
VTerrainChunk

09.04.2004
Buffer Operationen (BufferManipulations.h)
einige utilities
Util Lib zum grossteil nach v3dlib getan, v3dlib organisiert
namespaces zusammengefasst

07.04.2004
VPolarSphere: Halb/Teilkugeln (oben/unten angabe), Textur Koordinaten
default Color fuer mat. desc eingestellt
default Vertex structs

04.04.2004
alle Services zu einem project file zusammengefasst
example app aufgeraeumt
module auf VModuleBase umgestellt
VTextureStateCategory.cpp erzeugt

02.04.2004
angefangen mit Sprite Tests

01.04.2004
Console + WxWindows Services auf neues wx Modul System umgestellt

31.03.2004
Alle Services bis auf xml in einem Project File zusammengefasst
Modul Abstraktion eingebaut: statt DLLEntry Fkt von VModuleBase
ableiten + 1 globale Instanz der Klasse erstellen.

29.03.2004
VMaterialDescription erweitert (teilweise noch ohne Implementierung)
Details am Gfx Kram geaendert, erweitert use

18.03.2004
VPolarSphere und VGeometryData in eigene Datei gepackt und committet

16.03.2004
VOpenGLIndexMesh gefixt: daten layout wird beachtet
VPolarSphere geschrieben (Aequator/Pol Kugel)

15.03.2004
View/Model Matrix Kombination gefixt
kleine Performance Demo in die Example App gebaut ;)

14.03.2004
Einige alte Dateileichen aus dem CVS entfernt
Translate Fkt zu den Geometrie (Rotations) Funktionen hinzugefuegt
UtilsLib VS Projectfile Ornderstruktur etwas umsortiert

11.03.2004
Kamera Bewegung in der Example App Zeitabhaengig gemacht

10.03.2004
Erste Version des SceneGraphen fertig gestellt
SetMatrix Methode ins Device aufgenommen
DeviceMatrix geschrieben

06.03.2004
Mathlib ueberarbeitet: inkonsistenz zwischen matrix * matrix und vektor * vektor
Multiplikation beseitigt, und mit Mult koennen jetzt auch Matrizen verschiedener
Groesse multipliziert werden (4x3 * 3x5 -> 4x5)

23.02.2004
erzeugung von mesh + material verbunden, mesh - material hat jetzt 1:1 assoziation
material aus drawlist VModel genommen, mat wird jetzt uebers mesh.GetMaterial
bestimmt

22.02.2004
erste mem manager version (noch nicht im cvs)
image lib fix: tga loader einkommentiert + exception bei fehlern
verschiedene geometry typen fuer meshes + utils fuer ogl

21.02.2004
draw list geschrieben, mit simpelst implementation
mem manager spass

20.02.2004
texturen + poly mode sind als material umsetzbar
render state lists
render state categories und category list
cat list kann state list aus mat descr erzeugen
materialien werden vom device erzeugt und geloescht
device kann states setzen

19.02.2004
Textur und Polygon Mode States erzeugt, setzen von states durch state objekte
material description
textur buffer
tex coords in meshes unterstuetzt
renderer stuertzt nicht mehr ab wenn nicht alle vertex daten typen genutzt

18.02.2004
Int/Float Buffer durch "generische" Buffer ersetzt
indexed und non indexed rendering methods zu einer kombiniert die beides nach
bedarf kann (fuer ogl immediate mode)

15.02.2004
Den Code aus dem CVS gefixt.. (input manager und window service)

13.02.2004
ein wenig an VString rumgebastelt, ihr habts ja bemerkt ;)

10.02.2004
VIteratorBases: benutzung von smart pointern, damit hoffentlich mem leak behoben

09.02.2004
VString Fehler behoben + Mem Leak beseitigt

04.02.2004
Etwas javadoc Kommantare ergaenzt

02.02.2004
Kleine Updates der Coding Guidelines

24.01.2004
Ausgabeverzeichnisse und External Libs von velox/workspace/local nach velox/local
bewegt

23.01.2004
Geometry Utils zum leichteren Erzeugen von Float Buffer und Mesh Descriptions
hinzugefuegt

22.01.2004
Util Fkten zum Erzeugen von Geometrie erstellt

21.01.2004
Hilfsfunktionen fuer das Schreiben von Geometiedaten in Float Buffer angefangen
diverse nervenzusammenbrueche durchgestanden

18.01.2004
Einige Simple Datentypen fuer die Grafik API erstellt

20.12.2003
Dokumentationen mit Author Tags versehn
Wer hat nen geilen Einfall fuer das Design vom USG? :\

22.12.2003
VConsoleFrame: groesse geaendert, damit das ding auf meinen kleinen desktop passt :)
und die fkt zum erstellen des frames umgeschrieben, so dass man nicht mehr 25 minuten
fuer ne groessenaenderung braucht ;)

19.12.2003
Grundgeruest fuer das Graphics Device implementiert

15.12.2003
VList samt kleinem Test fertig implementiert, es fehlen nur noch ein paar kleinere Hilfsfunktionen
und Const Iteratoren

12.12.2003
STL Wrapper Iteratoren Policies ueberarbeitet, </> Vergleiche funktionieren jetzt mit
random_access_iteratoren (und auch nur damit, wies sein soll)

05.12.2003
Iteratoren ueberarbeitet. Anstatt von IVIteratorPol abgeleiteter Klassen koennen jetzt auch
eigene Versionen abgeleitet werden, muessen gleiche public Signatur haben wie VIteratorBase
ins VIteratorBase.h. Damit bekommt man dann STL konforme Iteratoren durch Implementation von
4 Funktionen

19.11.2003
Erste Mesh Description Version implementiert

12.11.2003
VFileStream.SetSize() implementiert

09.11.2003
Module Klasse entworfen, damit die .dll Sourcen leichter auf andere Systeme
portiert werden koennen

07.11.2003
VFS kann die Groessen von Dateien mittels IVFile::Clear oder IVBufferStream::SetSize
aendern. IVBufferStream in die Stream Hyrarchie aufgenommen
(Funktion mangels MSDN noch nicht implementiert)

einige kleinere Aenderungen

01.11.2003
nur damit das hier nicht so aussieht als wuerd ich gar nix mehr machen: ;)
neue UML Model Struktur, diverse Designs usw.

09.09.2003
UpdateManager Service geschrieben
Konsole benutzt Update Manager
Bug in SendDebugMessage behoben
VObjectRegistry: nur noch VNamedObjects koennne sich (un-)registrieren

08.09.2003
V3D_DEBUGMSG gefixt
SafeDelete + SafeDeleteArray Fkten
Project Files gefixt (falsche Ausgabe Dateinamen von UtilsLib + CommonServices)
Vorlagen fuer Service + Lib Projekte in Workspace/Templates
Templates fuer Velox Files ueberarbeitet
cout durch vout ersetzt

06.09.2003
Shutdown Bug gefixt

05.09.2003
ConfigProvider Service
SharedPtr.DropOwnership

04.09.2003
erste Mathlib Version fertig

02.08.2003
Zugriffsrechte koennen im .xml File gesetzt werden
Mounten von Verzeichnissen + Dateien
Erstellen komplett virtueller Verzeichnisse im vfs.xml File
Parsen der vfs.xml Config Datei, lesen vom Mount Infos, Verzeichnissen
VAccessRightsFlags eingebaut, zur Vereinfachung
CreateFile/DeleteFile
Fehler der SmartPointer entfernt

01.08.2003
diverses Design Zeug
CreateSubdir/DeleteSubdir Funktionen fuers Vfs

28.07.2003
Iteratoren Tutorial
Ueberpruefung der Zugriffsrechte von Dateien und Dateistreams
Problem mit SmartPointer beseitigt (operator=(T*) war unsinnig/fehlertraechtig)

25.07.2003
Virtual File System geaddet. Verzeichnisse koennen gemounted werden, und Dateien
zum lesen/schreiben geoeffnet werden
IteratorPolicy fuer STL Container die Zeiger/SmartPointer/Iteratoren enthalten
comittet

20.07.2003
Iteratoren (mit SmartPointer aehnlichem Verhalten zum Zurueckgeben von Iteratoren
aus DLLs), und ueberarbeitete Version der SmartPointer sowie Tests dafuer
fertig gestellt und committet

06.07.2003
VArray erstellt
VMemoryStream erstellt + Factory Methode zu IVStreamFactory hinzugefuegt
VIOException
Tests fuer VMemoryStream

03.07.2003
SmartPointer Tutorial liegt in Doc/Tutorials/SmartPointers
Doc/veloxdoc.css: StyleSheet fuer die Dokumentation, in alle .html eingebunden

01.07.2003
Neue SmartPointer sind einsatzbereit

17.06.2003
IVStreamFactory: wird als "vfs.strfact" registriert, zum erzeugen von Streams
Bug in SharedPtr behoben
Tests fuer IVStream und VFileStream geschrieben
Details am Unittest System geaendert

16.06.2003
Stream Factory fuers Vfs

14.06.2003
Das UnitTest Framework ist in Service Form (wieder) einsatzbereit

13.06.2003
Interface fuer Iteratoren sowie ein Template um STL konforme Iteratoren damit
zu wrappen geschrieben (API/v3d/Core/Wrappers/IVIterator.h,..)

UnitTest Framework in einen Service umgeschrieben, Velox.vcproj in der Konfig.
UnitTests erzeugen.

12.06.2003
Projekt Files ueberarbeitet: KernelLib wird jetzt auch benutzt

11.06.2003
VArrayStorage erzeugt, damit Arrays in SmartPointern gespeichert werden
koennen

10.06.2003
Ein paar Aenderungen an den Project Files vorgenommen, Velox laesst sich wieder
kompilieren und linken

06.06.2003
std::string aus dem Core entfernt, und durch VStringParam/VStringRetVal/VString
ersetzt
Project Files auf Multithreaded DLL gestellt, Kernel in KernelLib verbannt
Services: Name kann im Konstruktor angegeben werden

05.06.2003
VNamedObject usw.: std::string aus Interfaces entfernt

03.06.2003
IVIterator und IVContainer erstellt
Altes UnitTest Framework entfernt

02.06.2003
V3D_DEBUGMSG Makro in VLogging.h erstellt, zum senden von Debug Nachrichten
an den Error Service ala OutputDebugString

27.05.2003
VFileStream und VLegalOperations in der Implementation des VFS, koennen als
vorlauefiger VFS Ersatz benutzt werden (ins eigene Projekt kopieren)
Kernel geaendert: in der xml datei steht jetzt nur noch, wie die main app
heisst, sie muss zusaetzlich als service geladen werden. Dadurch kann
beeinflusst werden wann die Main App geladen wird (siehe
Workspace/Workdir/init.xml) Projektfiles geaendert, neues Arbeitsverzeichnis,
uebersichtlichere Ausgabe Verzeichnisse und Verwendung von Project File Makros

25.05.2003
Den Error Service "verhunzt", ein paar Kommentare im Source verteilt

19.05.2003
XML Service Header ins CVS committet, Implementation fehlt noch, kann daher noch
nicht benutzt werden

17.05.2003
UnitTest Framework ins neue CVS portiert

16.05.2003
Velox an VS.Net 2003 angepasst, Datei fuer Ziel Definition von Velox angelegt
(Doc/Information/GoalDefinition.html), Projektfiles ins CVS aufgenommen

14.05.2003
Vfs Interface erstellt, Vfs Xml Configdatei erzeugt, String Wrapper
geschrieben (VString)

07.05.2003
Neues CVS Modul angelegt

06.05.2003
XMLWrapper geplant

05.05.2003
Entwuerfe fuer den Vfs Service, und den XML Wrapper

02.05.2003
- CoreLib, ExampleService und Kernel in Namespaces verpackt
- Code an Coding Guidelines angepasst

01.05.2003
- Weitere Sources ins neue CVS portiert
- Geschwindigkeitstest mit Exceptions gemacht
- Coding Guidelines in Html verwandelt, umgeschrieben und erweitert
- Issues in issues.html exportiert und neu formatiert

30.4.2003
- Neue Velox Verzeichnisstruktur erstellt
- neue Velox Aufteilung nach den Services begonnen
- Kernel sowie ObjectRegistry, SmartPointer und ExampleService portiert.