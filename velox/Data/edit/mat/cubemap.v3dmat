<?xml version="1.0" encoding="utf-8"?>
<effect version="1.0">
	<shaderPath>
	
		<renderPass> 
			<state name="vertex-program">
				<iparam name="source">
varying vec2 texCoord;
varying vec3 normal;
varying vec3 reflected;

uniform mat4 v3d_ModelMatrix;
uniform mat4 v3d_ViewMatrix;
uniform vec4 v3d_CameraPos;

void main(void) {
	gl_Position = ftransform();

	normal = ( v3d_ModelMatrix * vec4(gl_Normal, 0.0) ).xyz;
	vec4 viewdir = (v3d_ModelMatrix * gl_Vertex) - v3d_CameraPos;
	viewdir = normalize(viewdir);
	reflected = viewdir.xyz;
/*	reflected = reflect( viewdir.xyz, normal ); */
	
/*	vec3 viewdir = normalize( (gl_ModelViewMatrixInverse * gl_Position) ).xyz; */
/*	reflected = reflect( viewdir, normal ); */
/*	vec4 viewdir = (gl_ModelViewMatrix * gl_Vertex);
	reflected = viewdir.xyz; */
/*	viewdir = gl_ModelViewMatrixInverse * gl_Position; */
/*	reflected = reflect( viewdir.xyz, normal ); */
}
				</iparam>
			</state>
			<state name="fragment-program">
				<iparam name="source">
uniform samplerCube cubemap;

varying vec2 texCoord;
varying vec3 normal;
varying vec3 reflected;

void main(void) {
	reflected = normalize( reflected );
	normal = normalize( normal );
	
	vec4 reflectedColor = textureCube( cubemap, reflect(reflected, normal) );
	vec4 refractedColor = textureCube( cubemap, refract(reflected, normal, 0.87) );

	gl_FragColor = reflectedColor;
/*
	float index = 1.0 - smoothstep( 0.1, 0.5, dot(normal, -reflected) );
	index = max( 0.0, min(1.0, index) );
	
	gl_FragColor = mix( reflectedColor, refractedColor, index );
*/
}
				</iparam>
			</state>
		</renderPass>
		
	</shaderPath>
</effect>
