///////////////////////////////////////////////////////////
//
//  VSmartHandleBase.h
//  Implementation of the Class VSmartHandleBase
//  Generated by Enterprise Architect
//  Created on:      16-Feb-2003 14:06:16
//  Original author: sheijk
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(VSmartHandleBase_FBD95528_12F2_4381_9609_92EFFA40DE20__INCLUDED_)
#define VSmartHandleBase_FBD95528_12F2_4381_9609_92EFFA40DE20__INCLUDED_

// Warnung fuer gekappte Template Methoden Namen ausschalten
#pragma warning( disable : 4786)

/*!
	VSmartHandleBase
	kann von SmartPointer etc. benutzt werden, kapselt das Zusammenspiel
	zwischen den einzelnen SmartPointer/Handle Policies
	!!! keine Klassen hiervon ableiten !!!
*/
template<typename T,class OwnerPolicy,class ReadCheckPolicy,class WriteCheckPolicy>
class VSmartHandleBase
{
public:
	VSmartHandleBase();
	// gefaehrlich, aber wuerde ansonsten platz verschwenden, s.o.
//	virtual ~VSmartHandleBase();

	typedef VSmartHandleBase<T, OwnerPolicy, ReadCheckPolicy, WriteCheckPolicy> 
		SmartHandleBaseType;

	T GetTarget();
	void SetTarget(T in_NewTarget);
	void Clone(SmartHandleBaseType& in_Other);
	void ReleaseTarget();

private:
	typedef VSmartHandleBase<T, OwnerPolicy, ReadCheckPolicy, WriteCheckPolicy> MyType;

	VSmartHandleBase(const MyType& in_Other);

	OwnerPolicy m_Owner;
	ReadCheckPolicy m_ReadGuard;
	WriteCheckPolicy m_WriteGuard;
};

// implementation
#include "VSmartHandleBase.inl"

#endif // !defined(VSmartHandleBase_FBD95528_12F2_4381_9609_92EFFA40DE20__INCLUDED_)
